import re
import urllib2
import os
from gi.repository import Gtk
import sqlite3 as db
import traceback
	#bad
	#global url1 = "http://google.com"
	#global url2 = "ht"
	#global url3 = "http://www.python.org/ftp/python/2.7.3/python-2.7.3.msi"
	#global url4 = "http://www.python.org/ftp/python/2.7.3/"	
	#global url5 = "support.google.com/webmasters/bin/answer.py?hl=en&answer=1408986"
	#global url6 = "support.google.com/webmasters/bin/answer.py"

DOWNLOAD_DIR="/home/sv/Downloads/"
TEMP_DIR="/tmp/"

def validateUrl(url):
	""" Helps to validate urls"""
	try:
		regex = re.compile(r'^(?:http|ftp)s?://' # http:// or https://
		r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
		r'localhost|' #localhost...
		r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
		r'(?::\d+)?' # optional port
		r'(?:/?|[/?]\S+)$', re.IGNORECASE)
		match = regex.match(url)
		if match:
			return 1
		else:
			return 0
	except Exception:
		return 0

def human_readable(num):
	num = int(num)
	for x in ['bytes','KB','MB','GB','TB']:
		if num < 1024.0:
			return "%3.1f %s" % (num, x)
		num /= 1024.0


def getUrlDetails(url):
	"""gets url details result in details"""
	try:
		details={}
		#getting and parsing and storing
		urlFile = urllib2.urlopen(url)
		urlDetails = str(urlFile.info())
		details = dict(map(str.strip, line.split(':', 1)) for line in urlDetails.splitlines())
		details['error']=""
		details['url']=urlFile.geturl()
		if 'Content-Length' in  details:
			details['Content-Length'] = str((details['Content-Length']))
		else:
			details['Content-Length'] ="Unavailable"
		#checking filetype
		if 'text/html' in details['Content-Type'] and os.path.basename(details['url'])=="": #if no filename
			details['url']=urlFile.geturl()+"index.html"
		details['filename'] = str.split(os.path.basename(details['url']),'?',1)[0]
		
		return details
	except Exception as e:
		return e


def status(window,msg):
	window.ui.label2.set_text(msg)

def addUrl(window,url):
	"""Function used to add url to download list"""
	#try:
	
	#check already exists
	result = checkUrlExists(window,url)
	if result==1:
		handleError(window,"Duplicate Download",Gtk.MessageType.WARNING) # NEED UPDATE
		return 0
	status(window,'Validating')
	result = validateUrl(url)
	if result == 0:
		handleError(window,"Can't add malformed url",Gtk.MessageType.ERROR)
	else:
		status(window,'Getting URL details')
		result = getUrlDetails(url)
		if type(result) ==dict:
			status(window,'Adding to List')
			if addToDb(window,result):
				listObject = window.builder.get_object('liststore1') #dependant
				listObject.append([1,result['filename'],result['url'],str(human_readable(result['Content-Length'])),"0%",""])
			status(window,'Idle')
			return 0
		else:
			handleError(window,result,Gtk.MessageType.WARNING)
			return 0		
	#except Exception as e:
	#	handleError(window,e,Gtk.MessageType.ERROR)
	#	return 0

def findFileName(filename):
	"""Find non exist filename to save download content"""
	num = 0		
	while os.path.exists(TEMP_DIR+filename) or os.path.exists(DOWNLOAD_DIR+filename):
		name,ext = os.path.splitext(filename)
		name = name+"("+str(num)+")"
		filename = name+ext
	return filename

def calcPer(file_id):
	try:
		con=db.connect('dlList.db')
		cursor = con.cursor()
		sql = "SELECT loc,size FROM downloads WHERE id="+file_id
		cursor.execute(sql)
		row = cursor.fetchone()
		totalSize = row[1]
		fileloc= row[0]
		con.close()
		dlSize = os.path.getsize(TEMP_DIR+fileloc)
		per = dlSize/totalSize *100
		return per
	except Exception e:
		print e
	

#######################################
# DB RELATED CODES
#######################################

def addToDb(window,d):
	"""Add download urls to database"""
	con = None
	try:
		con = db.connect('dlList.db')
		cursor = con.cursor()
		sql = "INSERT INTO downloads (filename,fileurl,size,loc) values('"+d['filename']+"','"+d['url']+"','"+d['Content-Length']+"','')"
		con.execute(sql)
		con.commit()
		return 1
	except Exception as e:		
		handleError(window,e,Gtk.MessageType.ERROR)
		return 0
		
def loadFromDb(window):
	"""Load download list from db"""
	con = None
	try:
		con=db.connect('dlList.db')
		cursor = con.cursor()
		sql = "SELECT * FROM downloads"
		cursor.execute(sql)
		rows = cursor.fetchall()
		listObject = window.builder.get_object('liststore1') #dependant
		for result in rows:
		#TODO:calculate percentage
			listObject.append([result[0],result[1],result[2],result[3],"0%",result[4]])
		return
	except Exception as e:		
		handleError(window,e,Gtk.MessageType.ERROR)

def checkUrlExists(window,url):
	"""Checks and return if url already in downloadlist"""
	con = None
	try:
		con=db.connect('dlList.db')
		cursor = con.cursor()
		sql = "SELECT * FROM downloads WHERE fileurl='"+url+"'"
		cursor.execute(sql)
		rows = cursor.fetchall()
		if len(rows)>0:
			return 1
		else:
			return 0
	except Exception as e:		
		handleError(window,e,Gtk.MessageType.ERROR)
def updateLoc(a,b): #a=Id,b=filename
	"""Update download location of file"""
	con = None
	try:
		con=db.connect('dlList.db')
		cursor = con.cursor()
		sql = "UPDATE downloads SET loc='"+b+"' WHERE id="+str(a)
		cursor.execute(sql)
		con.commit()
	except Exception as e:		
		print e
def emptyDb():
	"""Deletes all values in Databse"""
	con = None
	try:
		con=db.connect('dlList.db')
		cursor = con.cursor()
		sql = "DELETE FROM downloads"
		cursor.execute(sql)
	except Exception as e:		
		handleError(window,e,Gtk.MessageType.ERROR)

##############################################
# Error Handling Codes
##############################################


def handleError(window,e,t):
	"""Handles error Messages via messagebox"""
	if type(e)==Exception:
		traceback.print_last()
	msg = Gtk.MessageDialog(parent=window, flags=0, type=t, buttons=Gtk.ButtonsType.OK, message_format=str(e))   
	msg.run()
	msg.destroy() 
	

#Tests
import unittest

def unit():
	#testing validateurl
	d = {'filename':'TestFilename1','fileurl':'TestUrl1','Content-Length':'100 MB'}
	addToDb(d)
		

#emptyDb()


#import mydownloader.utility as u
#u.updateLoc(0,"hello.txt")




	
